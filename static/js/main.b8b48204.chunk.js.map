{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchBox/searchBox.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monsterS","id","alt","name","email","CardList","map","nameA","key","SearchBox","placeholder","handleChange","type","onChange","App","handlechange","e","setState","searchField","target","value","state","monster","fetch","then","resA","json","userA","this","filterMonster","filter","searchA","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mVAIaA,G,YAAO,SAACC,GAClB,OACA,yBAAKC,UAAY,kBACX,yBAAKC,IAAG,+BAA0BF,EAAMG,SAASC,IAAMC,IAAKL,EAAMG,SAASG,OAC3E,4BAAKN,EAAMG,SAASG,MACpB,2BAAIN,EAAMG,SAASI,UCHfC,G,MAAW,SAACR,GACtB,OAEG,yBAAKC,UAAY,aAEbD,EAAMG,SAASM,KAAI,SAAAC,GAAK,OAAI,kBAAC,EAAD,CAAMC,IAAOD,EAAMN,GAAID,SAAWO,UCL3DE,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACpB,2BACCb,UAAY,SACZc,KAAO,SACPF,YAAeA,EACfG,SAAYF,MC+BHG,E,YAlCb,WAAYjB,GAAO,IAAD,8BAChB,4CAAMA,KAYRkB,aAAe,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAACC,YAAcF,EAAEG,OAAOC,SAXxD,EAAKC,MAAO,CACVC,QAAS,GACTJ,YAAc,IAJA,E,iFAOE,IAAD,OACjBK,MAAM,8CACLC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,QAAUK,S,+BAKjC,IAAD,EAE6BC,KAAKP,MAAhCC,EAFF,EAEEA,QAAUJ,EAFZ,EAEYA,YACZW,EAAgBP,EAAQQ,QAAO,SAAAC,GAAO,OAAIA,EAAQ5B,KAAK6B,cAAcC,SAASf,EAAYc,kBAEhG,OACE,6BAASlC,UAAY,OACnB,2CACA,kBAAC,EAAD,CACAY,YAAc,cACdC,aAAgBiB,KAAKb,eAEpB,kBAAC,EAAD,CAAUf,SAAY6B,S,GA5BbK,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,MAAK,SAAAwB,GACjCA,EAAaC,kB","file":"static/js/main.b8b48204.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.style.css';\r\n\r\nexport const Card = (props) =>{\r\n   return(   \r\n   <div className = 'card-container'>      \r\n         <img src={`https://robohash.org/${props.monsterS.id}`} alt={props.monsterS.name}/>\r\n         <h2>{props.monsterS.name}</h2>\r\n         <p>{props.monsterS.email}</p>\r\n   </div>        \r\n   );\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\n\r\nimport {Card} from '../card/card.component'\r\n\r\nimport './card-list.style.css';\r\n\r\nexport const CardList = (props) =>{\r\n   return(\r\n      \r\n      <div className = 'card-list'>\r\n         {  \r\n          props.monsterS.map(nameA => <Card key = {nameA.id} monsterS ={nameA} ></Card>)\r\n        }\r\n      </div>\r\n   );\r\n\r\n}","import React from 'react';\r\n\r\nimport './searchBox.style.css';\r\n\r\n\r\n\r\nexport const SearchBox = ({placeholder,handleChange}) => (\r\n     <input \r\n      className = 'search'\r\n      type = 'search' \r\n      placeholder = {placeholder} \r\n      onChange = {handleChange}\r\n     />)\r\n","import React from 'react';\n\nimport './App.css'\n\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/searchBox/searchBox.component';\n\nclass App extends React.Component{ // or we can add Component in import statement like import React,{Component} from' react' and class App extends Component{}\n  constructor(props){\n    super(props);\n    this.state ={  \n      monster: [],\n      searchField : ''\n    }\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(resA => resA.json())\n    .then(userA => this.setState({monster : userA}))\n  }\n\n  handlechange = e => this.setState({searchField : e.target.value})\n\n  render(){\n\n    const { monster , searchField  } = this.state // it is equal to const monster = this.state.monster , searchField = this.state.searchField\n    const filterMonster = monster.filter(searchA => searchA.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return(\n      <section className = 'App'> \n        <h1>The Monster</h1>\n        <SearchBox \n        placeholder = 'Search here' \n        handleChange = {this.handlechange}\n        />\n         <CardList monsterS = {filterMonster}/>\n      </section>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}